// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  picture   String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  address   String?
  orders    Order[] // ความสัมพันธ์กับ Order
  carts     Cart[] // ความสัมพันธ์กับ Cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int             @default(0)
  quantity    Int
  orderItems  ProductOrder[] // ความสัมพันธ์กับ ProductOrder
  cartItem    ProductOnCart[]
  images      Image[] // ความสัมพันธ์กับ Image (หลายภาพต่อสินค้า)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Order {
  id          Int            @id @default(autoincrement())
  products    ProductOrder[] // ความสัมพันธ์กับ ProductOrder
  cartTotal   Float
  orderStatus String         @default("Not Process")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  userId Int // ฟิลด์ userId สำหรับเชื่อมโยงกับ User
  user   User @relation(fields: [userId], references: [id]) // ความสัมพันธ์กับ User
  stripPaymentId String
  amount Int
  status String
  currency String
}

model ProductOrder {
  id        Int     @id @default(autoincrement())
  Product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        Int             @id @default(autoincrement())
  products  ProductOnCart[]
  cartTotal Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  userId Int // ฟิลด์ userId สำหรับเชื่อมโยงกับ User
  user   User @relation(fields: [userId], references: [id]) // ความสัมพันธ์กับ User
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  Product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // ความสัมพันธ์กับ Product
}
